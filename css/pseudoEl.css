/*
::before is used for infix notation 
:: after is used for all the tags
In this way infix and tag can exist at the same time
*/

/***********   Infix Notation   *********/
/*
[data-enode=segment]>.ul_role>[data-enode]::before{
	background-image: url(../images/segment.svg);
	min-width: 22px;
	min-width: 22px;
}
[data-enode=segment]>.ul_role>[data-enode]:not(:first-of-type){
	margin-left: 11px; 
}
*/
.inheritInfix{
	background-size:0;
}
.inheritInfix>*:not(:first-of-type){
	background-image:inherit;
	background-size:0;
	margin-left:20px;
}
.inheritInfix>*:not(:first-of-type)::before{
	background-image:inherit;
	background-position:center;
	min-width: 20px;
	/*background-color: red;*/
	position: absolute;
	content: "i";
	color:transparent;
	left: -21px;
	pointer-events: none;
}

[data-enode=plus]>[class*="role"]>[data-enode]:not(:first-of-type),
[data-enode=leq]>.ol_role>[data-enode]:not(:first-of-type),
[data-enode=lt]>.ol_role>[data-enode]:not(:first-of-type)
{
	margin-left: 11px;/*space for infix symbol*/
}
[data-enode=plus][data-vis=resizable]>[class*="role"]>[data-enode]/*:not(.sortable-drag)*/{
	margin: 4px;
}
body.hidePlus [data-enode=plus]>[class*="role"]>[data-enode]::before{
	color:transparent;	
}
body[timesdisposition=brTimes] br + [data-enode]::before{
	background-color:transparent!important;	
}

[data-enode=plus]>[class*="role"]>[data-enode]:not(:first-of-type):not([data-vis=resizable])::before,
[data-enode=leq]>.ol_role>[data-enode]:not(:first-of-type)::before,
[data-enode=lt]>.ol_role>[data-enode]:not(:first-of-type)::before
/*,[data-enode=segment]>.ul_role>[data-enode]:not(:first-of-type)::before*/{
	/* background-color: red; */
	position: absolute;
	content: "+";/*&#x2264; for leq*/
	left: -11.6px;
	pointer-events: none;
	color:black;
}

[data-enode=leq]>.ol_role>[data-enode]:not(:first-of-type)::before {
	content:'\2264'!important;/*https://www.evotech.net/articles/testjsentities.html*/
}
[data-enode=lt]>.ol_role>[data-enode]:not(:first-of-type)::before {
	content: '<'!important;
}

[data-enode=times]>.ul_role>[data-enode]:not(:first-of-type)::before {
	background-color: black;
	position: absolute;
	content:"";
	left: -3px;
	width: 3.5px;
	height: 3.5px;
	z-index: 1;
	border-radius: 3px;
	top: calc(50% - 1.75px);
}
[data-enode=times]>.ul_role>[data-enode]:not(:first-of-type)/*:not(.sortable-drag)*/{
	margin-left: 0.5px; /*space for infix symbol*/
}

[timesdisposition=vertTimes] [data-enode=times]>.ul_role>[data-enode]:not(:first-of-type)/*:not(.sortable-drag)*/{
	margin-top: 0.5px; /*space for infix symbol*/
}

[timesdisposition=vertTimes] [data-enode=times]>.ul_role>[data-enode]:not(:first-of-type)/*:not(.sortable-drag)*/::before {
	top:-3px;
	left:calc(50% - 1.75px);
	pointer-events: none;
}

[timesdisposition=vertTimes] [data-variableorient=true][data-vis=collapsed]::after{
	transform: rotate(90deg);
}

.sortable-drag::before{/*if before is removed you get a flickering, so it is just hidden*/
	visibility:hidden;
}



/*
using ::before and ::after for prefix and postfix notation does not offer advantages
disadvantage: mixfix notation needs a different approach
disadvantage: building new prototypes is less intuitive


[data-enode="and"]:not(#canvasAnd):not(.sortable-ghost)::before{
	content:"";
	position: absolute;
	left: 2px;
	background-image: url(../images/GullBraceLeft.svg);
	background-color:red;
	width:17px;
	height:90%;
	background-size: contain;
	background-repeat: no-repeat;
}
[data-enode="deftrue"]::before{
	content:attr(data-decoration);
	position: absolute;
	left: -200px;
	background-image: url(../images/GullBraceLeft.svg);
	background-color:red;
	width:17px;
	height:90%;
	background-size: contain;
	background-repeat: no-repeat;
}
*/

/***********   Tags   ***********/

[data-tag]:not([data-vis=collapsed]):not([data-enode=ci])::after{
	position: absolute;
	bottom: 95%;
	right: 60%;
	box-shadow: 2px 3px 5px 0px grey;
}

/*[data-tag]::after{
	content:attr(data-tag);*/
[data-tag]::after/*,[title]:not([title=""]):hover::after*/{
	content:
	attr(data-tag)/*attr(title)*/;
	z-index: 1;
	background-image: inherit;
	border-color:inherit;
	background-color: inherit;
	/* width: 40px;*/
	min-height: 40px;
	background-size: contain;
	background-repeat: no-repeat;
	background-position: center left;
	padding-right:2px;
	border: 1px solid gray;
	border-radius: 8px;
	/* border-bottom-right-radius: 0px; */
	/*position: absolute;
	bottom: 95%;
	right: 60%;
	box-shadow: 2px 3px 5px 0px grey;*/
}
[data-tag][data-tagimg]::after{
	padding-left: 39px;
}

[data-tag]:not([data-vis=collapsed]):not([data-enode=ci]){
 background-position:-9999px -9999px;
 background-repeat: no-repeat;
}


[data-vis=collapsed][data-tag]>*,
[data-enode=ci][data-tag]>*{
	display:none;
}
[data-vis=collapsed][data-tag],
[data-enode=ci][data-tag]{
	/*width:20px;*/
	height: 20px;
	border-width:0px;
	align-self: center!important;
}
[data-vis=collapsed][data-tagimg]{/*collapsed around their image icon*/
	padding:0px;
  }
  
[data-vis=collapsed][data-tag]:not([data-tagimg])::after,
[data-enode=ci][data-tag]:not([data-tagimg])::after
{
	background:white;
	padding-left:0px;
}
[data-vis=collapsed][data-tag][data-tagimg]::after,
[data-enode=ci][data-tag][data-tagimg]::after{
	font-size:0px;
}
[data-enode="and"][data-and=horizontal]>.ul_role{
	padding:2px!important;
}